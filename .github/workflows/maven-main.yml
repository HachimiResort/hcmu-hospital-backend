# .github/workflows/main.yml

name: Java CI/CD for HCMU Hospital

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # --- Aliyun & Docker ---
  ALIYUN_REGISTRY: crpi-1kkkjpeehkoxqf8e.cn-shanghai.personal.cr.aliyuncs.com
  IMAGE_NAME: hcmu-hospital-backend # 镜像仓库名称
  IMAGE_TAG: latest

  # --- Application ---
  PORT: 8080  # 服务暴露的端口
  SPRING_PROFILES_ACTIVE: prod

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    # 仅在 push 到 main 分支时执行部署步骤
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Build with Maven
      # 对于多模块项目，在根目录执行 package 即可
      run: mvn -B package -DskipTests --file pom.xml

    - name: Login to Aliyun Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.ALIYUN_REGISTRY }}
        username: ${{ secrets.ALIYUN_DOCKER_HUB_USER }}
        password: ${{ secrets.ALIYUN_DOCKER_HUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ env.ALIYUN_REGISTRY }}/${{ secrets.ALIYUN_DOCKER_HUB_NAMESPACE }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

    - name: Setup SSH Agent
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Add remote server to known hosts
      run: ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy to Server
      run: |
        ssh root@${{ secrets.SERVER_HOST }} << EOF
          # --- 定义远程服务器上使用的变量 ---
          REGISTRY="${{ env.ALIYUN_REGISTRY }}"
          NAMESPACE="${{ secrets.ALIYUN_DOCKER_HUB_NAMESPACE }}"
          IMAGE_NAME="${{ env.IMAGE_NAME }}"
          IMAGE_TAG="${{ env.IMAGE_TAG }}"
          PORT="${{ env.PORT }}"
          SPRING_PROFILE="${{ env.SPRING_PROFILES_ACTIVE }}"
          
          FULL_IMAGE_NAME="\${REGISTRY}/\${NAMESPACE}/\${IMAGE_NAME}:\${IMAGE_TAG}"
          CONFIG_DIR="/opt/\${IMAGE_NAME}/config"
          CONFIG_FILE="\${CONFIG_DIR}/application-\${SPRING_PROFILE}.yml"

          echo ">>> 1. 准备部署环境..."
          mkdir -p \${CONFIG_DIR}
          
          echo ">>> 2. 将生产配置文件写入服务器..."
          # 将 GitHub Secret 的内容写入到服务器上的文件
          # 使用 cat 和 here document 来处理多行文本
          cat > \${CONFIG_FILE} <<'CONFIG_EOF'
          ${{ secrets.PROD_APPLICATION_YML }}
          CONFIG_EOF
          
          echo ">>> 3. 登录到阿里云镜像服务..."
          docker login --username=${{ secrets.ALIYUN_DOCKER_HUB_USER }} --password=${{ secrets.ALIYUN_DOCKER_HUB_TOKEN }} \${REGISTRY}

          echo ">>> 4. 停止并删除旧容器和镜像..."
          docker stop \${IMAGE_NAME} || true
          docker rm \${IMAGE_NAME} || true
          docker rmi \${FULL_IMAGE_NAME} || true
          
          echo ">>> 5. 拉取最新镜像..."
          docker pull \${FULL_IMAGE_NAME}
          
          echo ">>> 6. 启动新容器并挂载配置文件..."
          docker run -d \
            -p \${PORT}:\${PORT} \
            --name \${IMAGE_NAME} \
            -v \${CONFIG_FILE}:/app/config/application-\${SPRING_PROFILE}.yml \
            -e SPRING_PROFILES_ACTIVE=\${SPRING_PROFILE} \
            \${FULL_IMAGE_NAME}

          echo ">>> 部署完成！"
        EOF